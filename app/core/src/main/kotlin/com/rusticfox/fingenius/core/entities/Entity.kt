package com.rusticfox.fingenius.core.entities

import com.rusticfox.fingenius.core.UniqueEntityId
import kotlinx.datetime.LocalDateTime


/**
 * Entity is an abstract class that is inherited by entities in the system. This is used to represent common information
 * that all entities have
 * @param creationDate [LocalDateTime] The date this Entity was created
 * @param updatedDate [LocalDateTime] the date this Entity was updated
 * @param deletedAt [LocalDateTime] the date this Entity was deleted from the system, this is defaulted to null
 * indicated that the entity has not been deleted,
 * @param entityId [UniqueEntityId] Unique entity ID, this is defaulted to be autogenerated, otherwise a unique ID can
 * be passed in
 */
abstract class Entity(
    creationDate: LocalDateTime,
    updatedDate: LocalDateTime,
    deletedAt: LocalDateTime? = null,
    val entityId: UniqueEntityId = UniqueEntityId()
) {
    init {
        require(creationDate <= updatedDate) {
            "Entity ${this.javaClass.name}(ID: $entityId) should have a creation date $creationDate that is " +
                    "before updated date $updatedDate"
        }

        // if deleted at exists, then it must be after both created date and updated date. This is because it's not
        // possible to delete an entity that has not been created before
        deletedAt?.let {
            require(it >= creationDate) {

                "Entity ${this.javaClass.name}(ID: $entityId) should have a deleted date $it that is after creation date $creationDate"
            }

            require(it >= updatedDate) {
                "Entity ${this.javaClass.name}(ID: $entityId) should have a deleted date $it that is after " +
                        "updated date $updatedDate"
            }
        }
    }

    override fun equals(other: Any?): Boolean {
        if (other === null) {
            return false
        }

        if (this === other) {
            return true
        }

        if (other !is Entity) {
            return false
        }

        return this.entityId == other.entityId
    }

    override fun hashCode(): Int {
        var result = entityId.hashCode()
        result = 31 * result + entityId.hashCode()
        return result
    }

    val identifier: String
        get() = entityId.value

}
